
services:
  # API Gateway service
  api-gateway:
    build:
      context: ./backend/api-gateway
    ports:
      - "7500:7500"
    depends_on:
      - auth-service
      - restaurant-service
      - order-service
      - review-service
      - user-service
      - employee-service
    environment:
      - PORT=7500
      - AUTH_SERVICE_URL=http://auth-service:3001
      - RESTAURANT_SERVICE_URL=http://restaurant-service:3002
      - ORDER_SERVICE_URL=http://order-service:3003
      - REVIEW_SERVICE_URL=http://review-service:3004
      - USER_SERVICE_URL=http://user-service:3005
      - EMPLOYEE_SERVICE_URL=http://employee-service:3006
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    restart: always
    # Add healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7500/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./backend/auth-service
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    networks:
      - backend-network
    restart: always
    # Add healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Restaurant Service
  restaurant-service:
    build:
      context: ./backend/restaurant-service
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./backend/order-service
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Review Service
  review-service:
    build:
      context: ./backend/review-service
    ports:
      - "3004:3004"
    environment:
      - PORT=3004
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: ./backend/user-service
    ports:
      - "3005:3005"
    environment:
      - PORT=3005
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Employee Service
  employee-service:
    build:
      context: ./backend/employee-service
    ports:
      - "3006:3006"
    environment:
      - PORT=3006
      - JWT_SECRET=${JWT_SECRET}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  backend-network:
    driver: bridge
